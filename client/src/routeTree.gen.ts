/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SigninRouteImport } from './routes/signin'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as ProtectedIndexRouteImport } from './routes/_protected/index'
import { Route as ProtectedProfileRouteImport } from './routes/_protected/profile'
import { Route as ProtectedPlaylistsRouteImport } from './routes/_protected/playlists'
import { Route as ProtectedExploreRouteImport } from './routes/_protected/explore'
import { Route as ProtectedPostIdRouteImport } from './routes/_protected/post.$id'
import { Route as ProtectedPlaylistIdRouteImport } from './routes/_protected/playlist.$id'

const SigninRoute = SigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedProfileRoute = ProtectedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedPlaylistsRoute = ProtectedPlaylistsRouteImport.update({
  id: '/playlists',
  path: '/playlists',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedExploreRoute = ProtectedExploreRouteImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedPostIdRoute = ProtectedPostIdRouteImport.update({
  id: '/post/$id',
  path: '/post/$id',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedPlaylistIdRoute = ProtectedPlaylistIdRouteImport.update({
  id: '/playlist/$id',
  path: '/playlist/$id',
  getParentRoute: () => ProtectedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/signin': typeof SigninRoute
  '/explore': typeof ProtectedExploreRoute
  '/playlists': typeof ProtectedPlaylistsRoute
  '/profile': typeof ProtectedProfileRoute
  '/': typeof ProtectedIndexRoute
  '/playlist/$id': typeof ProtectedPlaylistIdRoute
  '/post/$id': typeof ProtectedPostIdRoute
}
export interface FileRoutesByTo {
  '/signin': typeof SigninRoute
  '/explore': typeof ProtectedExploreRoute
  '/playlists': typeof ProtectedPlaylistsRoute
  '/profile': typeof ProtectedProfileRoute
  '/': typeof ProtectedIndexRoute
  '/playlist/$id': typeof ProtectedPlaylistIdRoute
  '/post/$id': typeof ProtectedPostIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteWithChildren
  '/signin': typeof SigninRoute
  '/_protected/explore': typeof ProtectedExploreRoute
  '/_protected/playlists': typeof ProtectedPlaylistsRoute
  '/_protected/profile': typeof ProtectedProfileRoute
  '/_protected/': typeof ProtectedIndexRoute
  '/_protected/playlist/$id': typeof ProtectedPlaylistIdRoute
  '/_protected/post/$id': typeof ProtectedPostIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/signin'
    | '/explore'
    | '/playlists'
    | '/profile'
    | '/'
    | '/playlist/$id'
    | '/post/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/signin'
    | '/explore'
    | '/playlists'
    | '/profile'
    | '/'
    | '/playlist/$id'
    | '/post/$id'
  id:
    | '__root__'
    | '/_protected'
    | '/signin'
    | '/_protected/explore'
    | '/_protected/playlists'
    | '/_protected/profile'
    | '/_protected/'
    | '/_protected/playlist/$id'
    | '/_protected/post/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  SigninRoute: typeof SigninRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/profile': {
      id: '/_protected/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProtectedProfileRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/playlists': {
      id: '/_protected/playlists'
      path: '/playlists'
      fullPath: '/playlists'
      preLoaderRoute: typeof ProtectedPlaylistsRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/explore': {
      id: '/_protected/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ProtectedExploreRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/post/$id': {
      id: '/_protected/post/$id'
      path: '/post/$id'
      fullPath: '/post/$id'
      preLoaderRoute: typeof ProtectedPostIdRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/playlist/$id': {
      id: '/_protected/playlist/$id'
      path: '/playlist/$id'
      fullPath: '/playlist/$id'
      preLoaderRoute: typeof ProtectedPlaylistIdRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}

interface ProtectedRouteChildren {
  ProtectedExploreRoute: typeof ProtectedExploreRoute
  ProtectedPlaylistsRoute: typeof ProtectedPlaylistsRoute
  ProtectedProfileRoute: typeof ProtectedProfileRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
  ProtectedPlaylistIdRoute: typeof ProtectedPlaylistIdRoute
  ProtectedPostIdRoute: typeof ProtectedPostIdRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedExploreRoute: ProtectedExploreRoute,
  ProtectedPlaylistsRoute: ProtectedPlaylistsRoute,
  ProtectedProfileRoute: ProtectedProfileRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedPlaylistIdRoute: ProtectedPlaylistIdRoute,
  ProtectedPostIdRoute: ProtectedPostIdRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  SigninRoute: SigninRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
